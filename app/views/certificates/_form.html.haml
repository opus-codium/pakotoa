-# haml-lint:disable InstanceVariables, InlineStyles, ViewLength
- params[:method] ||= 'csr'
.tabs.is-boxed
  %ul
    %li{ class: ("is-active" if params[:method] == 'csr') }= link_to "CSR", new_certificate_authority_certificate_path(@certificate_authority, method: 'csr'), data: { toggle: "nav" }
    %li{ class: ("is-active" if params[:method] == 'spkac') }= link_to "SPKAC", new_certificate_authority_certificate_path(@certificate_authority, method: 'spkac'), data: { toggle: "nav", disabled: true }
    %li{ class: ("is-active" if params[:method] == 'insecure') }= link_to "Insecure", new_certificate_authority_certificate_path(@certificate_authority, method: 'insecure'), data: { toggle: "nav", disabled: true }

.tab-content
  - if params[:method] == 'csr'
    .notification.is-info.is-light
      %p
        This method allows you to directly submit a <em>Certificate Signing Request</em> generated using
        %code openssl req -nodes -newkey rsa:2048 -keyout key.pem -out req.pem
      - if @certificate_authority.policy
        %p
          To ease-up this process, you are advised to merge
          = link_to "this OpenSSL configuration snippet", openssl_req_certificate_authority_path(@certificate_authority, format: :text)
          into your <em>openssl.cnf</em> configuration file.
    = simple_form_for [@certificate_authority, @certificate] do |f|
      - if @certificate.errors.any?
        .notification.is-danger
          %h2 #{pluralize(@certificate.errors.count, "error")} prohibited this certificate from being saved:
          %ul
            - @certificate.errors.full_messages.each do |msg|
              %li= msg

      = f.hidden_field :method, value: :csr
      = f.input :csr, as: :text, input_html: { class: "textarea" }
      = f.submit t(".save"), class: "button is-primary"
      = link_to t(".back"), @certificate.persisted? ? [@certificate_authority, @certificate] : certificate_authority_certificates_path(@certificate_authority), class: "button"
-#
  - if params[:method] == 'spkac'
    .notification.is-info.is-light
      %p
        This method, <em>Signed Public Key and Challenge</em>, is similar to the CSR since the certificate private key is never known by the server and cannot be compromised.  After completion, the certificate and the private key will be installed in your web user agent and will have to be exported.
    - if !@certificate.issuer.policy
      .notification.is-danger
        %p
          This method is not available when no policy is enforced on the certificate authority.
    - else
      = simple_form_for [@certificate_authority, @certificate] do |f|
        - if @certificate.errors.any?
          .notification.is-danger
            %h2 #{pluralize(@certificate.errors.count, "error")} prohibited this certificate from being saved:
            %ul
              - @certificate.errors.full_messages.each do |msg|
                %li= msg

        = f.hidden_field :method, value: :spkac
        - @certificate.issuer.policy.subject_attributes.order("position").each_with_index do |attr, i|
          .field
            = label_tag "attr_#{i}", attr.description, class: 'label'
            - if attr.policy == "match"
              = text_field_tag "attr_#{i}", attr.default, class: "input", disabled: "disabled"
            - else
              = text_field_tag "attr_#{i}", attr.default, class: "input"
        .field
          = f.label :public_key
          %keygen.input{ name: "public_key" }
        = f.submit t(".save"), class: "button is-primary"
        = link_to t(".back"), @certificate.persisted? ? [@certificate_authority, @certificate] : certificate_authority_certificates_path(@certificate_authority), class: "button"
  - if params[:method] == 'insecure'
    .notification.is-warning.is-light
      %p
        This method let the server generate both the private key and the certificate (that is, generate a CSR on the server side).
        %br/
        While this is somewhat convenient, at some point the server knows the private key of the user certificate.  This kind of situation should be avoided.
    - if !@certificate.issuer.policy
      .notification.is-danger
        %p
          This method is not available when no policy is enforced on the certificate authority.
    - else
      = simple_form_for [@certificate_authority, @certificate] do |f|
        - if @certificate.errors.any?
          .notification.is-danger
            %h2 #{pluralize(@certificate.errors.count, "error")} prohibited this certificate from being saved:
            %ul
              - @certificate.errors.full_messages.each do |msg|
                %li= msg

        = f.hidden_field :method, value: :insecure
        - @certificate.issuer.policy.subject_attributes.order("position").each_with_index do |attr, i|
          .field
            = label_tag "attr_#{i}", attr.description, class: 'label'
            - if attr.policy == "match"
              = text_field_tag "attr_#{i}", attr.default, class: "input", disabled: "disabled"
            - else
              = text_field_tag "attr_#{i}", attr.default, class: "input"
        = f.submit t(".save"), class: "button is-primary"
        = link_to t(".back"), @certificate.persisted? ? [@certificate_authority, @certificate] : certificate_authority_certificates_path(@certificate_authority), class: "button"
